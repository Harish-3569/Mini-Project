package com.example.demo.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.Entity.PlayList;
import com.example.demo.Repository.PlayListRepo;


@RestController
public class PlayListController {
	@Autowired
	public PlayListRepo play;
	
	@PostMapping("/postplay")
	public ResponseEntity<String> saveDet(@RequestBody PlayList e) {
		play.save(e);
		return  ResponseEntity.ok("Data Added");
	}
	@GetMapping("/getplay")
	public List<PlayList> getDetails() {
		return play.findAll();
	}
	@PutMapping("/putplay")
	public PlayList updateDetails(@RequestBody PlayList p1) {
		return play.saveAndFlush(p1);
	}
	@DeleteMapping("/deleteplay/{id}")
	public String deleteDetails(@PathVariable("id") int id) {
		play.deleteById(id);
		return "Deleted Content with id:"+id;
	}
	
}
_______________________________

package com.example.demo.Entity;

import java.util.List;

import org.springframework.web.bind.annotation.CrossOrigin;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
@CrossOrigin
@Entity
@Table(name="playlistinfo")
public class PlayList {
	@Id
	private int id;
	private String name;
	
	@OneToMany(cascade=CascadeType.ALL)
	@JoinColumn(name="fk_song")
	private List<Song> song;
	
	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public List<Song> getSong() {
		return song;
	}

	public void setDept(List<Song> song) {
		this.song = song;
	}

	public PlayList(int id, String name, List<Song> song) {
		super();
		this.id = id;
		this.name = name;
		this.song = song;
	}

	public PlayList() {
		
	}

}
_____________________________________
package com.example.demo.Entity;
import org.springframework.web.bind.annotation.CrossOrigin;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
@CrossOrigin
@Entity
@Table(name="Songdetails")
public class Song {
	@Id
	private int songid;
	private String songname;
	private String songurl;
	
	public int getSongid() {
		return songid;
	}

	public void setSongid(int songid) {
		this.songid = songid;
	}

	public String getSongname() {
		return songname;
	}

	public void setSongname(String songname) {
		this.songname = songname;
	}
	
	public String getSongurl() {
		return songurl;
	}

	public void setSongurl(String songurl) {
		this.songurl = songurl;
	}

	public Song(int songid, String songname, String songurl) {
		super();
		this.songid = songid;
		this.songname = songname;
		this.songurl = songurl;
	}

	public Song() {
		
	}

}
________________________
package com.example.demo.Repository;

import org.springframework.data.jpa.repository.JpaRepository;

import com.example.demo.Entity.PlayList;



public interface PlayListRepo extends JpaRepository<PlayList,Integer> {

}
____________

spring.datasource.url:jdbc:mysql://localhost:3306/music
spring.datasource.username=root
spring.datasource.password=Ha@260204


spring.jpa.show-sql=true
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=update

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
